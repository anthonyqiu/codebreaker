/*=================================================================
Problem Definition – Required to find the largest number in a list of numbers
Input – a series of numbers until the word exit is input
Output – the largest number entered
Process – compare numbers to see which one is the largest
=================================================================
List of Identifiers -listed  in each method 
=================================================================
*/
import java.util.*;//get access to util library
import java.io.*;//get access to io library

public class PlayerGuess {//class starts
/**playerGuess method:
* This functional method allow player to guess AI's code(Player Vs AI), with feedback from AI after each guess
*
* List of Local Variables
* name - a string variable to store user's input
* code - an array of integer type to store random code generated by computer
* stCode - an array of string type that store code in string type
* colourFreq-an array of integer type tells the frequency of colors appears in a guess
* numMoves - initialization of a int type variable that represents the number of moves one player make
* blacks - number of black pegs
* tempColourFreq - update of the frequency of the number of times certain color appears
* hints - a priority queue that automatically sorts out the hints black pegs>>>white pegs>>>blank
* @param (leaderboards)
* @throws IO Exception
* @void - to perform player guess functioanlity and print winning/losing messages
*/
    public static void playerGuess(File leaderboards) throws IOException{
        System.out.println("Please enter you name:");
        String name = Util.getInput();
        int[] code = Util.getRandomPegs();
        String[] stCode = Util.intToStringCode(code);//cast code from integer type to string type
        for(int i = 0; i < code.length; ++i){
            System.out.print(stCode[i] + " ");
        }
        System.out.println();
        int[] colourFreq = new int[7];
        for(int i = 0; i < code.length; ++i){
            ++colourFreq[code[i]];
        }

        int numMoves = 1;
        Timer timer = new Timer();
        timer.startTimer();
        while(numMoves <= 8){
            int[] tempColourFreq = colourFreq;
            System.out.println("Please make a guess:");
            int[] guess = Util.getUserCode();
            int blacks = 0;
            PriorityQueue<Integer> hints = new PriorityQueue<>();

            for(int i = 0; i < guess.length; ++i){
                if(guess[i] == code[i]){
                    ++blacks;
                    --tempColourFreq[guess[i]];
                    if(blacks == 4){
                        Text.printWinningMessage(name);
                        timer.stopTimer();
                        Text.printTime(timer.toSecs());
                        int score = (10 - numMoves) * 120 - timer.getTime();
                        Leaderboards.updateScore(leaderboards, new Score(name, score));
                        System.out.println("Your score was: " + score);
                        return;
                    }
                    hints.add(0);   //0 represents black peg
                }
            }
            for(int i = 0; i < guess.length; ++i){
                if(tempColourFreq[guess[i]] > 0){
                    --tempColourFreq[guess[i]];
                    hints.add(1);   //1 represents white peg
                }
            }
            System.out.println("Here are the hints");
            while(!hints.isEmpty()){
                if(hints.peek() == 0){
                    System.out.print("B ");
                    hints.poll();
                }
                else if(hints.peek() == 1){
                    System.out.print("W ");
                    hints.poll();
                }
            }
            System.out.println();
            ++numMoves;
        }
        Text.printLosingMessage();//call printLosingMessage method
        timer.stopTimer();//call stopTimer method
        Text.printTime(timer.toSecs());//call printTime method
        return;
    }//end method
    
}//end class
